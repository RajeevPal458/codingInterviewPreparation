https://practice.geeksforgeeks.org/explore?page=8&company[]=Amazon&sortBy=submissions.



work duration -> 
chetu  :  25th Jan 2016  -  5 Jan 2018
infogain : 10th Jan 2018  - 10 Dec 2018
bureau veritas :  12th Dec 2018 - till now



https://howtodoinjava.com/interview-questions/top-spring-interview-questions-with-answers/
https://howtodoinjava.com/spring-core/
https://www.educative.io/blog/spring-webflux-tutorial
https://www.javatpoint.com/spring-boot-annotations
https://www.javatpoint.com/spring-boot-starter-data-jpa
https://maven.apache.org/
https://maven.apache.org/guides/getting-started/





gucci flora perfume



https://www.interviewbit.com/courses/programming/topics/arrays/					

	https://dzone.com/articles/how-to-achieve-oauth2-security-in-microservices-di
	https://developer.okta.com/blog/2020/08/14/spring-gateway-patterns
https://data-flair.training/blogs/apache-kafka-tutorial/
Do you have experience in WebSphere Portal Server?*



Implementing JWT (JSON Web Tokens) with Spring Security in Springboot App
What Is The Most Challenging Project You Have Worked On?

https://www.interviewbit.com/puzzles/
important questons ---
spring boot embedded database  = embedded H2, HSQL and Derby databases. (in memory database)
difference between Yaml and Properties file (indentation)
what is thymeleaf
application.properties => spring.application.name , spring.config.name ,server.port ,
Spring Boot Embedded Web Server  :  Tomcat , Jetty Server , Undertow Server

How to change server in spring boot.{
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jetty</artifactId>
</dependency>
}

PATCH HTTP Request: Unlike PUT Request, PATCH does partial update e.g. Fields that need to be updated by the client, only that field is updated without modifying the other field.

So in the previous example, we have to send only the name and email field in the request body.

{
"first_name":"Geeky",    // field that to be updated
"email":"hello@geeky.com",     // field that to be updated
}


Maven what is ArtifactId  and groupId
Non Idempotent HTTP methods Post

Mockito test framwork , Simple Single Sign-On with Spring Security OAuth2{
test private method and static using  ' Powermock '
}
JUnit4 test framwork
Spring Security JWT  , oauth2
ci cd pipeline jenkins
devops ci/cd pipeline  https://devops.com/how-to-implement-an-effective-ci-cd-pipeline/
Microservices 
Docker  framwork ,Kubernate

GIT Framwork 
MongoDB         https://www.guru99.com/mongodb-tutorials.html  , 
https://docs.mongodb.com/manual/core/databases-and-collections/
GIT -  https://git-scm.com/docs/gittutorial ,https://www.tutorialspoint.com/git/git_basic_concepts.htm ,
https://www.vogella.com/tutorials/Git/article.html

Mockito Framwork - 
----
Core java important questions
--
cross origin in spring 
---.
Flutter developer amazon lamda  mongodb  S3  Git ", " Jenkins "
what is use of jProfiler .{
it is a tool used for performance testing --
}
what is swagger{
	Api documentation
}
https://java2blog.com/java-collections-interview-questions/

How to print even and odd numbers using threads in java

List<Employee>  emp ;  find duplicate {
findDuplicateInStream(Stream<T> stream)
    {
  
        // Return the set of duplicate elements
        return stream
  
            // Group the elements along
            // with their frequency in a map
            .collect(
                Collectors.groupingBy(
                    Function.identity(),
                    Collectors.counting()))
  
            // Convert this map into a stream
            .entrySet()
            .stream()
  
            // Check if frequency > 1
            // for duplicate elements
            .filter(m -> m.getValue() > 1)
  
            // Find such elements
            .map(Map.Entry::getKey)
  
            // And Collect them in a Set
            .collect(Collectors.toSet());
    }
}

string str="sgggfgdjdgf"  find duplicate ;
Mock final class .(Mockito 2 now supports final )

mock static methods 
.
test void method using mockito
{
MyList myList = mock(MyList.class);
    doNothing().when(myList).add(isA(Integer.class), isA(String.class));
doThrow().when(myList).add(isA(Integer.class), isNull());

    myList.add(0, "");
 
    verify(myList, times(1)).add(0, "");

MyList myList = mock(MyList.class);
    ArgumentCaptor<String> valueCapture = ArgumentCaptor.forClass(String.class);
    doNothing().when(myList).add(any(Integer.class), valueCapture.capture());
    myList.add(0, "captured");
 
    assertEquals("captured", valueCapture.getValue());

}
------
Spring Class A is singlton inside  class B that's prototype 
Spring Class B is prototype inside  class A thats Singlton { all works as singlton use ApplicationContextAware}
is spring bean thread safe .

SQL Query Questions-------
Employee    Department
empId       depId
name        departmentName , empId

Q. find number of employee from it department , number of employee in each depertment
Q. which development model you are following : agile 
Q. what are thread pools 

Q. diff bet  singlton design pattern  and singlton bean
<bean id="bean1"  class ="Employee" >
<bean id="bean2"  class ="Employee" >   how many objects  will  create{
A Spring Singleton does not work like a Java Singleton.
If we see the output of the program, we will understand that it will return two different instances, So in a container, th
}


db table design order product customer     (multiple products types)

Q. class A - > class B - > class c -  > class D   got exeption and how to handle
Q. java 8  filter Employee based on age and salary 

Q. How will you handle situation when live application down and find Outoffmemory eror : first stop server and then check all process running and kil them all clean server like some logs and and other restart again .

Q. what is connection pools ;{
	A JDBC connection pool is a group of reusable connections for a particular database. Because creating each new physical connection is time consuming, the server maintains a pool of available 		connections to increase performance. When an application requests a connection, it obtains one from the pool.
}

Q. what is threadProol  given situation (miceroservice Front   calling to A B C D  services parallaly)

Q. String str = "aabbbcccddssaaddffvv"  find duplicates   and delete duplicates 
Q. what is parallel stream java 8
Q. spring security jwt authenication. And how do you authorization request.

Q. time complexity for inserting an element in ArrayList
Q. time complexity for inserting an element in LinkedList
Q. time complexity for retrieving an element from LinkedList
Transaction vihavoirs
Q. how to create checked custom exception 
Q. use of static block 

maven scops 

agile process 
Where non static variables are stored in Java?

Image result for where static variables are stored in java


What is hascode : hashCode() is used for bucketing in Hash implementations like HashMap, HashTable, HashSet, etc.
The value received from hashCode() is used as the bucket number for storing elements of the set/map. This bucket number is the address of the element inside the set/map.

What is custom Exception in java :  https://www.baeldung.com/java-new-custom-exception
1) Custom Checked Exception:
Checked exceptions are exceptions that need to be treated explicitly.

Let’s consider a piece of code that returns the first line of the file:

try (Scanner file = new Scanner(new File(fileName))) {
    if (file.hasNextLine()) return file.nextLine();
} catch(FileNotFoundException e) {
    // Logging, etc 
}
The code above is a classic way of handling Java checked exceptions. While the code throws FileNotFoundException, it's not clear what the exact cause is — whether the file doesn't exist or the file name is invalid.

To create a custom exception, we have to extend the java.lang.Exception class.
Let’s see an example of this by creating a custom checked exception called IncorrectFileNameException:

public class IncorrectFileNameException extends Exception { 
    public IncorrectFileNameException(String errorMessage) {
        super(errorMessage);
    }
}

2) Custom Unchecked Exception{
In our same example, let's assume that we need a custom exception if the file name doesn't contain any extension.

In this case, we'll need a custom unchecked exception similar to the previous one, as this error will only be detected during runtime.

To create a custom unchecked exception, we need to extend the java.lang.RuntimeException class:

public class IncorrectFileExtensionException 
  extends RuntimeException {
    public IncorrectFileExtensionException(String errorMessage, Throwable err) {
        super(errorMessage, err);
    }
}

}


Static block :
 Java supports a special block, called static block (also called static clause) which can be used for static initializations of a class. This code inside static block is executed only once: the first time the class is loaded into memory. For example, check output of following Java program.
 // filename: Main.java
class Test {
	static int i;
	int j;
	
	// start of static block
	static {
		i = 10;
		System.out.println("static block called ");
	}
	// end of static block
}

class Main {
	public static void main(String args[]) {

		// Although we don't have an object of Test, static block is
		// called because i is being accessed in following statement.
		System.out.println(Test.i);
	}
}

static block called 
10
Also, static blocks are executed before constructors. For example, check output of following Java program.
If a class has static members that require complex initialization, a static block is the tool to use. Suppose you need a static map of some kind (the purpose is irrelevant here). You can declare it in-line like this:

public static final Map<String, String> initials = new HashMap<String, String>();
However, if you want to populate it once, you can't do that with an in-line declaration. For that, you need a static block:

public static final Map<String, String> initials = new HashMap<String, String>();
static {
    initials.put("AEN", "Alfred E. Newman");
    // etc.
}


SOLID Design principles ,CORE Java, J2EE (Spring, Spring Boot) , Web services (REST), Ant/Maven,
Code Quality: Unit Testing ( Junit 4/5 + Mockito), Code quality check Tools ( SonarQube, Sona type)


cloud watch , ec2 instances 
https://www.javainuse.com/webseries/spring-security-jwt/chap7
https://www.javainuse.com/webseries/spring-security-jwt/chap4
https://www.bezkoder.com/spring-boot-refresh-token-jwt/

cloud watch , ec2 instances 
https://www.javainuse.com/webseries/spring-security-jwt/chap7
https://www.javainuse.com/webseries/spring-security-jwt/chap4
https://www.bezkoder.com/spring-boot-refresh-token-jwt/


How to implements thread pool
how to implement producer consumer problem
how to implement own ArrayList 
contract in Hashmap when key as objects
predicate
consumer
suppier
exception rules in overriding
exception heirchy
cyclic varrier , latch
collection foreach vs stream foreach
Parallel Streams

https://javahungry.blogspot.com/2015/02/how-concurrenthashmap-works-in-java-internal-implementation.html
https://medium.com/slalom-build/optimistically-locking-your-spring-boot-web-services-187662eb8a91



top companies twitter , adoby , microsoft , confluent ,
linkedin , endeed , salesforce , atlasian , Google , OCI , Paypal , VISA,
Tower research capital
Gravitation Research
world quant,
nike
Intuit,
Fidelity investment
Wells fargo,
Druva ,
flipkart,
Myntra,
Udaan,
Urban Company
Curefit
Razore pay
paytm,
Rupeek,
Jupiter money,
phone pay,
Zeta,
Clea Tax,
JusPAy


Zynga,
MPL,
Dream 11,
Hotstar
Flock

Nurture.form
Meesho
Inmobi
swiggy
zamato
Delhivery
Rivigo
ola 
vogo
dunzo
wooqer
Freshworks


3+ years of experience building and developing backend applications
Experience and familiarity with frameworks and tools viz Sprint Boot,Spring MVC,Docker,IntelliJ
Experience in Continuous Delivery and DevOps mindset
Experience with GraphQL





https://app.resumekraft.com/editor/personal-info/-MvaUE7Q5rsvmpAyC7U0

tech.  cucumber for TDD

Some of the tools which support TDD are: JUnit, TestNG, NUnit, etc. Some of the tools which support BDD are SpecFlow, Cucumber, MSpec, et

Note: Please prepare on below concepts for tomorrow discussion.
 
Java,Spring Boot,Micro Service,TDD ,BDD ,CI/CD,Agile,Kafka

incryption / decryption / digital Signature / how security works 
https://www.docusign.com/how-it-works/electronic-signature/digital-signature/digital-signature-faq
https://www.cisa.gov/uscert/ncas/tips/ST04-018#:~:text=Digital%20signatures%20work%20by%20proving,using%20the%20sender's%20private%20key.

JWT Spring Security , refresh token , Spring security ith jwt and oauth.
socket programming
TCP / UDP ..
https://www.codeusingjava.com/jwt/jwt4

Reactive programming --
Experience with MySQL, NoSql (Cassandra, Redis, DynamoDB)

Technology Stack for Cross-Platform Apps
React Native
React Native is a JavaScript framework built by Facebook, Inc. for developing mobile apps with native visualization for iOS, Android, WEB. The main feature of React Native is that it lets programmers use the same code to run both iOS and Android apps. The combo of the JavaScript library and React’s UI paradigm allows responsive applications to interact with native APIs and consequently keeps the development team productive. The framework offers new and radical tools for building robust applications with an intuitive user interface. This programming tool is considered to be the most efficient way to create cross-platform applications due to its wider acceptance and mature market presence.

 Scala, Cassandra, Kafka, Postgres, Functional Programming, REST API, microservices architecture, JSON, Avro, CI/CD, AWS, Fargate, Terraform, Git, Data streaming, ElasticSearch, Redis, Event Sourcing, unit/functional testing, cats, cats-effect, tagless final, CQRS, event sourcing




SPRING Modules
=====================
	@configuration
	@Controller
	Acutators/ Histrix/ Turbine etc…
	@qualifier
	@autoenable configuration
	Autowiring & how to avoid autowiring conflicts?
	Spring Boot --@Component
	Spring boot depenecy management
	Spring Annotaions
	How @component works internally?
	Wat features of spring data you have used?
	Can I change the annotations of service repository in component?
	Spring Cloud Config.- (Netflix OSS, Eureka & Zuul Gateway)

REST API
====================================
	Best practices you follow while using Rest
	Get,Put,Post,Delete method
	Versioning? Why & When do we use?
	Pagination? Why & When do we use?
	Hateos?
	How do you handle Exceptions in rest? 
	Idempotent VS non idempotent methods In rest?
	Diff b/w Put & Patch?
	Resource Grouping?
	Code Generation & Mocking?
	Write API with Contract 1st Approach with Open API Spec. (Swagger)
	Coarse vs Fine Grain API

Application Security
API Security Basic Auth, Client Credential, JWT usage, JJWT lib
Authcode Flow, Open IDC, IAM integration, key cloak
=====================================
	*Is ware of basic Authentication and API key verification
* Has consumed JWT token and is aware of token validation
*Auth2.0 using client ID and client secret at minimum  
*Aware of OAUTH grant types(Client credential, password, implicit, Authcode)


Micro Services
======================================
Orchestration, Choreogrpahy, SAGA Pattern with Usecase
	*Understanding of Orchestration & choreography scenarios through user Journey
	*Command Pattern & Eventual Consistency
	Difference between orchestration & Choreography

Bounded Context, Domain model, Transactions with Usecase
Bounded context,Services decomposition, distributed service commn


CQRS and Event sourcing with Usecase
Caching in MS, CQRS in API strategy and DB strategy, 


API Gateway
API Gateway policy Implemenmtation security , traffic, Devportal 



1)	What is your exp in MS?

2)	Explain MS Architecture? Pros & cons of MS? 

3)	Challenges while migrating from Monolithic to MS?

4)	Wat all key factors you consider wen u design rest API for a given application?

5)	Ntelix OSS stack (Erureka, Zuul)

6)	Wat is service discovery? Wat are client Side & server side discovery?

7)	Any experience in Security?

8)	Can u brief wat is SAGA pattern? Why do we use SAGA?

9)	Wat are orchestrator & choreographer patterns in SAGA?

10)	Wat is API composer, circuit breaker, Service discovery, Service registry, API gateway pattern?

11)	Any exp with Event driven or domain driven?

12)	Wat are the different things you do to minimize the risk while migrating from monolithic to MS?

13)	How you actually take care of multiple transactions?

14)	Which interface you have used for Inter communication of MS ? like rest template or Finclinet?

15)	While creating rest what are the problems you encounter While connecting with MS?

16)	Wat is chain of responsibility pattern in MS?


17)	Wat kind of output we get in rest? Like XML, HTML etc…

18)	XML & HTML are same or different? If yes, then How?

19)	Wat are the components in HTTP requests?

20)	How will you breakup response?

21)	Wat are the components of Rest response?

22)	Wat is the URI. URL format u create in rest API? What is the standard recommended practice?

23)	Wat is Pagination? When & how does it work?

24)	Wat is Versioning? When & how does it work?

25)	Wat interface u use for Inter-communication of MS? Like rest template & fin client

26)	Any caching exp? Which cache? Wen & wer to use cache?

27)	Key thing su keep in mind whether the data to be cached or not?

28)	API security? Wat do you understand?

29)	How will you secure you API’s?

30)	How will you implement SSO/ OAuth2.0 ?

31)	Wen & wer to SSO (Single Sign on)?

32)	How will you identify whether use has SSO access or not?

33)	Any cloud exp? Which cloud?

34)	1 or 2 cloud based questions?

35)	Have you been involved in production Deployment? If yes then wen and wat is the checklist u follow?

36)	Wat are you roles & responsibilities during your implementation.

37)	If you have 1000 requests, wat approach you will take to resposnd to all 1000?

38)	Deff b/w put & patch? Use case wer u will use put & Patch?

39)	How u integrate swagger with you Rest API?

40)	Di you use any services of cloud so far?

41)	How r u validating logs through AWS?




