import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split

class GDMultipleLinearRegressor:
    def __init__(self, lr=0.01, epochs=1000):
        self.lr = lr
        self.epochs = epochs
        self.weights = None
        self.bias = 0
        self.losses = []

    def fit(self, X, y):
        if isinstance(X, pd.DataFrame):
            X = X.values
        if isinstance(y, pd.Series):
            y = y.values

        m, n = X.shape
        self.weights = np.zeros(n)
        self.bias = 0

        for epoch in range(self.epochs):
            y_pred = np.dot(X, self.weights) + self.bias
            error = y - y_pred

            # Gradients
            dw = (-2 / m) * np.dot(X.T, error)
            db = (-2 / m) * np.sum(error)

            # Update
            self.weights -= self.lr * dw
            self.bias -= self.lr * db

            # Loss (MSE)
            loss = (1 / m) * np.sum(error ** 2)
            self.losses.append(loss)

            if epoch % 100 == 0:
                print(f"Epoch {epoch:4d} | Loss: {loss:.4f} | Weights: {self.weights[:3]}... | Bias: {self.bias:.4f}")

    def predict(self, X):
        if isinstance(X, pd.DataFrame):
            X = X.values
        return np.dot(X, self.weights) + self.bias



# Load and prepare data
diabetes = load_diabetes()
df = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)
df['target'] = diabetes.target

X = df.drop('target', axis=1)
y = df['target']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = GDMultipleLinearRegressor(lr=0.1, epochs=1000)
model.fit(X_train, y_train)

# Predict
predictions = model.predict(X_test)

# Compare predictions vs actual
print("Sample predictions vs actual:")
for p, a in zip(predictions[:5], y_test.values[:5]):
    print(f"Predicted: {p:.2f}, Actual: {a}")


plt.plot(model.losses)
plt.title("Loss (MSE) over Epochs")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.grid(True)
plt.show()


plt.scatter(y_test, predictions, color='blue', label='Predicted vs Actual')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', label='Perfect Prediction')
plt.xlabel("Actual Target")
plt.ylabel("Predicted Target")
plt.title("Multiple Linear Regression (Gradient Descent)")
plt.legend()
plt.grid(True)
plt.show()

