import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split

class GDLinearRegressor:
    def __init__(self, lr=0.01, epochs=1000):
        self.lr = lr
        self.epochs = epochs
        self.m = 0
        self.b = 0
        self.losses = []

    def fit(self, X, y):
        # Use only 1D feature array
        if isinstance(X, pd.DataFrame):
            X = X.iloc[:, 0].values
        if isinstance(y, pd.Series):
            y = y.values

        n = len(X)

        for epoch in range(self.epochs):
            y_pred = self.m * X + self.b
            error = y - y_pred

            # Calculate gradients
            dm = (-2/n) * np.sum(X * error)
            db = (-2/n) * np.sum(error)

            # Update parameters
            self.m -= self.lr * dm
            self.b -= self.lr * db

            # Calculate and store loss (MSE)
            loss = (1/n) * np.sum(error ** 2)
            self.losses.append(loss)

            # Print every 100 epochs
            if epoch % 100 == 0:
                print(f"Epoch {epoch:4d} | Loss: {loss:.4f} | m: {self.m:.4f} | b: {self.b:.4f}")

    def predict(self, X):
        if isinstance(X, pd.DataFrame):
            X = X.iloc[:, 0].values
        return self.m * X + self.b



# Load and prepare data
diabetes = load_diabetes()
df = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)
df['target'] = diabetes.target

X = df[['bmi']]
y = df['target']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = GDLinearRegressor(lr=0.1, epochs=1000)
model.fit(X_train, y_train)

# Predict
predictions = model.predict(X_test)

# Plot predictions
plt.figure(figsize=(8, 5))
plt.scatter(X_train, y_train, color='blue', label='Train Data')
plt.scatter(X_test, y_test, color='green', label='Test Data')

# Sort test X for smooth line
sorted_idx = X_test['bmi'].argsort()
plt.plot(X_test.iloc[sorted_idx], predictions[sorted_idx], color='red', label='Prediction Line')

plt.title("Gradient Descent Linear Regression (1 Feature: BMI)")
plt.xlabel("bmi")
plt.ylabel("Target")
plt.legend()
plt.grid(True)
plt.show()


plt.plot(model.losses)
plt.title("Loss (MSE) over Epochs")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.grid(True)
plt.show()
